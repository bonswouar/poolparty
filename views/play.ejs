<%- include('header') -%>

<body>
  <div id="container">
    <video id="video"
      width="640"
      poster="//shaka-player-demo.appspot.com/assets/poster.jpg"
      controls autoplay>
    </video>
  </div>
  <button id="next" onclick=nextVideo();> Next </button>
</body>
<script src="/js/dash-utils.js"></script>
<script src="/js/shaka-player.compiled.js"></script>
<script>
  window.data = [];
  window.nextVideoLoading = false;
  window.player = null;
  window.currentVideoUrl = null;
  window.playing = false;

  function nextVideo() {
    if (window.data.length > 0 && !window.nextVideoLoading) {
      window.nextVideoLoading = true;
      var nextVideoUrl = window.data.shift();
      window.socket.emit('nextVideo', nextVideoUrl);
      loadVideo(nextVideoUrl);
    }
  }

  function updateTime() {
    if (window.playing) {
      var video = document.getElementById('video');
      window.socket.emit('update time', {time: video.currentTime, currentVideoUrl: window.currentVideoUrl});
    }
  }

  function updatedTime(data) {
    var video = document.getElementById('video');
    var time = data['time'];
    // Seek if desync is more than 10s
    if (data['currentVideoUrl'] == window.currentVideoUrl && window.playing && time > 10 && time > video.currentTime + 5 && video.buffered) {
      var video = document.getElementById('video');
      // Seek 1s before for best results (?)
      video.currentTime = time - 1;
    }
  }

  function initShaka() {
    // Install built-in polyfills to patch browser incompatibilities.
    shaka.polyfill.installAll();

    // Check to see if the browser supports the basic APIs Shaka needs.
    if (shaka.Player.isBrowserSupported()) {
      // Everything looks good!
      if (window.data.length > 0) {
        loadVideo(window.data.shift());
      }
    } else {
      // This browser does not have the minimum set of APIs we need.
      console.error('Browser not supported!');
    }
  }

  document.addEventListener('DOMContentLoaded', initShaka);

  function loadVideo(url) {
    window.currentVideoUrl = url;
    var youtubeId = window.getParseAddress(url);
    if (!youtubeId) {
      return;
    }
    var video = document.getElementById('video')

    const requestYoutubeInfo = async () => {
      var videoData = await window.getYoutubeInfo(youtubeId, true);
      if (videoData) {
        video.poster = videoData['thumbnail'];

        var streams = [];
        streams.push(...videoData['audioStreams']);
        streams.push(...videoData['videoStreams']);

        // generate dash file from streams
        const dash = generate_dash_file_from_formats(streams, videoData['duration']);
        hlsUrl = "data:application/dash+xml;charset=utf-8;base64," + btoa(dash);

        // Check if player instance exists
        if (!window.player) {
          const player = new shaka.Player(video);
          window.player = player;
          video.addEventListener('playing',  () => {
            window.playing = true;
          });
          video.addEventListener('pause', () => {
            window.playing = false;
            // Hack to handle "end" signal not sent
            if (video.currentTime && video.duration - video.currentTime < 1) {
              nextVideo();
            }
          });
          video.addEventListener('ended', nextVideo);
          video.addEventListener('timeupdate', updateTime);
        } else {
          player = window.player;
        }

        player.addEventListener('error', onError);


        player.load(hlsUrl, 0, "application/dash+xml").then(() => {
          console.log('Video loaded successfully');
          window.nextVideoLoading = false;
        }).catch((error) => {
          console.log('Error loading video:', error);
          window.playing = false;
        });

        function onError(event) {
          window.playing = false;
          console.error('Error code', event.detail.code, 'object', event.detail);
        }

      }
    };
    requestYoutubeInfo();
  }
</script>
<%- include('footer') -%>
